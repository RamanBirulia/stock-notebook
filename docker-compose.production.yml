services:
  postgres:
    image: postgres:15-alpine
    container_name: stock-notebook-postgres-prod
    environment:
      POSTGRES_DB: stock_notebook
      POSTGRES_USER: stock_user
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backend/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - stock-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stock_user -d stock_notebook"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    container_name: stock-notebook-backend-prod
    environment:
      DATABASE_URL: postgresql://stock_user:${DATABASE_PASSWORD}@postgres:5432/stock_notebook
      JWT_SECRET: ${JWT_SECRET}
      RUST_LOG: info
      PORT: 8080
      ENVIRONMENT: production
      ENABLE_API_REQUEST_LOGGING: "false"
      ENABLE_API_RESPONSE_LOGGING: "false"
      SQLX_MAX_CONNECTIONS: ${SQLX_MAX_CONNECTIONS:-20}
      SQLX_MIN_CONNECTIONS: ${SQLX_MIN_CONNECTIONS:-5}
      SQLX_ACQUIRE_TIMEOUT: ${SQLX_ACQUIRE_TIMEOUT:-30}
      SQLX_IDLE_TIMEOUT: ${SQLX_IDLE_TIMEOUT:-600}
      SQLX_MAX_LIFETIME: ${SQLX_MAX_LIFETIME:-1800}
    networks:
      - stock-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.5"
          memory: 256M

  nginx:
    build:
      context: .
      dockerfile: nginx/Dockerfile
    container_name: stock-notebook-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - stock-network
    restart: unless-stopped
    volumes:
      - ./frontend/build:/var/www/html:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
        reservations:
          cpus: "0.1"
          memory: 128M

volumes:
  postgres_data_prod:
    driver: local
  nginx_logs:
    driver: local

networks:
  stock-network:
    driver: bridge
